"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4818],{8268:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>h});var s=t(5893),i=t(1151);const a={title:"Interacting with Spotify"},r=void 0,o={id:"guides/interacting-with-spotify",title:"Interacting with Spotify",description:"This guide is aimed to demonstrate how you can interact seamlessly with the Spotify REST API using Tailcall's @http operator. Not only that, but we will also be using other operators such as @cache to demonstrate how you can harness the power of Tailcall's operators to build a powerful and efficient application.",source:"@site/docs/guides/interacting-with-spotify.md",sourceDirName:"guides",slug:"/guides/interacting-with-spotify",permalink:"/docs/guides/interacting-with-spotify",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/guides/interacting-with-spotify.md",tags:[],version:"current",frontMatter:{title:"Interacting with Spotify"},sidebar:"tutorialSidebar",previous:{title:"Environment Variables",permalink:"/docs/guides/environment-variables"},next:{title:"Logging",permalink:"/docs/guides/logging"}},l={},h=[{value:"Roadmap",id:"roadmap",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Set up development environment",id:"set-up-development-environment",level:3},{value:"Obtaining Spotify Access Token",id:"obtaining-spotify-access-token",level:3},{value:"Interacting with the API",id:"interacting-with-the-api",level:2},{value:"Setting up the types",id:"setting-up-the-types",level:3},{value:"Setting up our server",id:"setting-up-our-server",level:3},{value:"Get an album&#39;s details",id:"get-an-albums-details",level:3},{value:"Getting tracks of an album",id:"getting-tracks-of-an-album",level:3},{value:"Save albums for current user",id:"save-albums-for-current-user",level:3},{value:"Get a user&#39;s saved albums",id:"get-a-users-saved-albums",level:3},{value:"Remove an album from a user&#39;s saved albums",id:"remove-an-album-from-a-users-saved-albums",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["This guide is aimed to demonstrate how you can interact seamlessly with the Spotify REST API using Tailcall's ",(0,s.jsx)(n.code,{children:"@http"})," operator. Not only that, but we will also be using other operators such as ",(0,s.jsx)(n.code,{children:"@cache"})," to demonstrate how you can harness the power of Tailcall's operators to build a powerful and efficient application."]}),"\n",(0,s.jsx)(n.h2,{id:"roadmap",children:"Roadmap"}),"\n",(0,s.jsx)(n.p,{children:"We would be building a simple server that would allow us to do the following using Spotify's REST API:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Get an album's details"}),"\n",(0,s.jsx)(n.li,{children:"Get tracks of an album"}),"\n",(0,s.jsx)(n.li,{children:"Save an album"}),"\n",(0,s.jsx)(n.li,{children:"Get a user's saved albums"}),"\n",(0,s.jsx)(n.li,{children:"Remove an album from a user's saved albums"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,s.jsx)(n.h3,{id:"set-up-development-environment",children:"Set up development environment"}),"\n",(0,s.jsxs)(n.p,{children:["First, let's create a new file that we will be using to write our schema. For this guide, we will be using a ",(0,s.jsx)(n.code,{children:".graphql"})," schema. So, let's create a file named ",(0,s.jsx)(n.code,{children:"spotify.graphql"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["You would need to install the ",(0,s.jsx)(n.a,{href:"/docs/getting_started",children:"Tailcall CLI"})," to proceed any further. Once you have that set up, proceed to the next section."]}),"\n",(0,s.jsx)(n.h3,{id:"obtaining-spotify-access-token",children:"Obtaining Spotify Access Token"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://developer.spotify.com/documentation/web-api#getting-started",children:"This"})," section of Spotify API's documentation explains how you can obtain an access token. Once you have the access token, we will be using it as a ",(0,s.jsx)(n.code,{children:"Bearer"})," token, which we will be passing in the ",(0,s.jsx)(n.code,{children:"Authorization"})," header of our requests. This token enables spotify to identify the user on whose behalf the request is being made."]}),"\n",(0,s.jsx)(n.h2,{id:"interacting-with-the-api",children:"Interacting with the API"}),"\n",(0,s.jsx)(n.h3,{id:"setting-up-the-types",children:"Setting up the types"}),"\n",(0,s.jsx)(n.p,{children:"Once we have got our file set up, we will have to set up the types that we will be using in our schema. For this guide, we will be using the following types:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:"type AlbumInput {\n  ids: [String]!\n}\n\ntype DeleteTrackInput {\n  tracks: [TrackUri]\n  snapshot_id: String\n}\n\ntype AddTrackInput {\n  uris: [String]!\n}\n\ntype TrackUri {\n  uri: String!\n}\n\ntype Artist {\n  id: String!\n  name: String!\n  type: String!\n  uri: String!\n}\n\ntype Track {\n  id: String!\n  name: String!\n  type: String!\n  uri: String!\n  href: String\n  artists: [Artist]!\n}\n\ntype Album {\n  id: String!\n  name: String!\n  type: String!\n  uri: String!\n  href: String\n  images: [Image]!\n  total_tracks: Int!\n  tracks: TrackPage\n  artists: [Artist]!\n}\n\ntype Image {\n  height: Int!\n  url: String!\n  width: Int!\n}\n\ninterface Page {\n  total: Int!\n  limit: Int!\n  offset: Int!\n  previous: String\n  next: String\n  href: String\n}\n\ntype TrackPage implements Page {\n  items: [Track]!\n  total: Int!\n  limit: Int!\n  offset: Int!\n  previous: String\n  next: String\n  href: String\n}\n\ntype AlbumPage implements Page {\n  items: [Album]!\n  total: Int!\n  limit: Int!\n  offset: Int!\n  previous: String\n  next: String\n  href: String\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can copy and paste the content into your ",(0,s.jsx)(n.code,{children:"spotify.graphql"})," file."]}),"\n",(0,s.jsxs)(n.p,{children:["While some of the types such as ",(0,s.jsx)(n.code,{children:"Album"}),", ",(0,s.jsx)(n.code,{children:"Track"})," may be self explanatory, the other types would become clearer as we use them in our schema. ",(0,s.jsx)(n.strong,{children:"Note that, these types are a subset of what the Spotify API returns. We have only included the fields that we would be using in our schema."})]}),"\n",(0,s.jsx)(n.h3,{id:"setting-up-our-server",children:"Setting up our server"}),"\n",(0,s.jsxs)(n.p,{children:["Tailcall provides us with a ",(0,s.jsxs)(n.a,{href:"/docs/operators/server",children:[(0,s.jsx)(n.code,{children:"@server"})," operator"]})," that allows us to set up a GraphQL server. There are a lot of parameters that we can pass to the ",(0,s.jsx)(n.code,{children:"@server"})," operator to configure our server. For this guide, we will be using the following parameters:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"port"}),": The port on which we want to run our server"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"graphiql"}),": Whether we want to enable the GraphiQL interface or not"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, there's also an ",(0,s.jsxs)(n.a,{href:"/docs/operators/upstream",children:[(0,s.jsx)(n.code,{children:"@upstream"})," operator"]})," that allows us to specify various HTTP parameters that we would like to use in our schema. We will be using this operator to set up our HTTP client's configuration. We would be using the following parameters:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"baseURL"}),": The base URL of the API that we want to interact with"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"timeout"}),": The timeout for our HTTP requests"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"All together, our schema would look like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'schema @server(port: 8000, graphiql: true) @upstream(baseURL: "https://api.spotify.com/v1", timeout: 60) {\n  query: Query\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Note that we don't have a ",(0,s.jsx)(n.code,{children:"mutation"})," field in our schema. We will come to mutations later on, and hence, it's left blank for the moment."]})}),"\n",(0,s.jsx)(n.h3,{id:"get-an-albums-details",children:(0,s.jsx)(n.a,{href:"https://developer.spotify.com/documentation/web-api/reference/albums/get-album/",children:"Get an album's details"})}),"\n",(0,s.jsxs)(n.p,{children:["We will use this endpoint to get the details of an album. We will be using the ",(0,s.jsx)(n.code,{children:"@http"})," operator to make a ",(0,s.jsx)(n.code,{children:"GET"})," request to the endpoint. The ",(0,s.jsx)(n.code,{children:"@http"})," operator takes in the following arguments:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": The id of the album"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"accessToken"}),": The access token that we obtained earlier"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'getAlbum(id: String!, access_token: String!): Album\n  @http(\n    method: "GET"\n    path: "/albums/{{args.id}}"\n    headers: [{key: "Authorization", value: "Bearer {{args.accessToken}}"}]\n  )\n'})}),"\n",(0,s.jsxs)(n.p,{children:["As you can see, we are passing the ",(0,s.jsx)(n.code,{children:"id"})," and ",(0,s.jsx)(n.code,{children:"access_token"})," to the ",(0,s.jsx)(n.code,{children:"@http"})," operator via our schema's arguments. ",(0,s.jsx)(n.code,{children:"@http"})," internally uses ",(0,s.jsx)(n.strong,{children:"Mustache Templates"})," to render the values of the arguments ar runtime."]}),"\n",(0,s.jsx)(n.p,{children:"Next up, we will be starting our server and testing this query. To start the server, run the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"tailcall start spotify.graphql\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Once the server has started, you can open the GraphQL Playground at ",(0,s.jsx)(n.code,{children:"http://localhost:8000"})," and run the following query:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'getAlbum(id: "1OSzM1OWqtTnmIJJQpn62Q", accessToken: "<your token here>") {\n    id,\n    name,\n    tracks {\n      items {\n          id\n          name\n          href\n        }\n      total\n    }\n    images {\n    \turl\n    },\n    artists{\n      name\n    }\n  }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The id ",(0,s.jsx)(n.code,{children:"1OSzM1OWqtTnmIJJQpn62Q"})," is for ",(0,s.jsx)(n.a,{href:"https://open.spotify.com/album/1OSzM1OWqtTnmIJJQpn62Q?autoplay=true",children:"Charlie Puth's Nine Track Mind"}),". You can replace it with any album ID that you like."]}),"\n",(0,s.jsx)(n.p,{children:"Running this query will return the following response:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:"showLineNumbers",children:'{\n  "data": {\n    "getAlbum": {\n      "id": "1OSzM1OWqtTnmIJJQpn62Q",\n      "name": "Nine Track Mind (Deluxe Edition)",\n      "tracks": {\n        "items": [\n          {\n            "id": "19f9roe77Hen23e6vJ1iBN",\n            "name": "One Call Away",\n            "href": "https://api.spotify.com/v1/tracks/19f9roe77Hen23e6vJ1iBN"\n          },\n          {\n            "id": "0DbVHIAldoWzrImJU9WN5y",\n            "name": "Dangerously",\n            "href": "https://api.spotify.com/v1/tracks/0DbVHIAldoWzrImJU9WN5y"\n          }\n          //...\n        ],\n        "total": 15\n      },\n      "images": [\n        {\n          "url": "https://i.scdn.co/image/ab67616d0000b27379ea6a5f1580c0e5aded18e9"\n        },\n        {\n          "url": "https://i.scdn.co/image/ab67616d00001e0279ea6a5f1580c0e5aded18e9"\n        },\n        {\n          "url": "https://i.scdn.co/image/ab67616d0000485179ea6a5f1580c0e5aded18e9"\n        }\n      ],\n      "artists": [\n        {\n          "name": "Charlie Puth"\n        }\n      ]\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"getting-tracks-of-an-album",children:(0,s.jsx)(n.a,{href:"https://developer.spotify.com/documentation/web-api/reference/get-an-albums-tracks",children:"Getting tracks of an album"})}),"\n",(0,s.jsxs)(n.p,{children:["Yet another example of fetching, this time, we will shift our focus on how we can handle pagination with Tailcall. The ",(0,s.jsx)(n.code,{children:"tracks"})," field of the ",(0,s.jsx)(n.code,{children:"Album"})," type returns a ",(0,s.jsx)(n.code,{children:"TrackPage"})," type. This type is an implementation of the ",(0,s.jsx)(n.code,{children:"Page"})," interface. The ",(0,s.jsx)(n.code,{children:"Page"})," interface is implemented by both ",(0,s.jsx)(n.code,{children:"TrackPage"})," and ",(0,s.jsx)(n.code,{children:"AlbumPage"})," types. This allows us to use the ",(0,s.jsx)(n.code,{children:"Page"})," interface as a return type for our ",(0,s.jsx)(n.code,{children:"tracks"})," field. This is how the query schema looks like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'    getTracksOfAlbum(id: String!, limit: Int!, offset: Int!, accessToken: String!): TrackPage\n        @http(\n            method: "GET"\n            path: "/albums/{{args.id}}/tracks?limit={{args.limit}}&offset={{args.offset}}"\n            headers: [{ key: "Authorization", value: "Bearer {{args.accessToken}}" }]\n        )\n'})}),"\n",(0,s.jsxs)(n.p,{children:["As you can see, we are passing the ",(0,s.jsx)(n.code,{children:"limit"})," and ",(0,s.jsx)(n.code,{children:"offset"})," arguments to the ",(0,s.jsx)(n.code,{children:"@http"})," operator. This allows us to control the number of items that we want to fetch and the offset from which we want to fetch the items. This is how the query looks like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'getTracksOfAlbum(\n  id: "1OSzM1OWqtTnmIJJQpn62Q",\n  limit: 5,\n  offset: 0,\n  accessToken: "<your token here>") {\n  total,\n  items {\n  \tname\n\t}\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Here, we are fetching 5 items (",(0,s.jsx)(n.code,{children:"limit=5"}),") per page, and we are starting with the very first (",(0,s.jsx)(n.code,{children:"offset=0"}),") element in the database."]}),"\n",(0,s.jsx)(n.p,{children:"The response to this query looks like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:"showLineNumbers",children:'{\n  "data": {\n    "getTracksOfAlbum": {\n      "total": 15,\n      "items": [\n        {\n          "name": "One Call Away"\n        },\n        {\n          "name": "Dangerously"\n        },\n        {\n          "name": "Marvin Gaye (feat. Meghan Trainor)"\n        },\n        {\n          "name": "Losing My Mind"\n        },\n        {\n          "name": "We Don\'t Talk Anymore (feat. Selena Gomez)"\n        }\n      ]\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["As a rule, whenever you are fetching a list of items, or any data that is large, ",(0,s.jsx)(n.strong,{children:"Caching"})," is a must. This is where the ",(0,s.jsxs)(n.a,{href:"/docs/operators/cache",children:[(0,s.jsx)(n.code,{children:"@cache"})," operator"]})," comes into play. The ",(0,s.jsx)(n.code,{children:"@cache"})," operator allows us to cache the response of a query for a certain amount of time. This is how we can use the ",(0,s.jsx)(n.code,{children:"@cache"})," operator in our schema:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'getTracksOfAlbum(id: String!, limit: Int!, offset: Int!, accessToken: String!): TrackPage\n  @http(\n    method: "GET"\n    path: "/albums/{{args.id}}/tracks?limit={{args.limit}}&offset={{args.offset}}"\n    headers: [{ key: "Authorization", value: "Bearer {{args.accessToken}}" }]\n  )\n  @cache(maxAge: 3000)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This will now cache the response of the request for ",(0,s.jsx)(n.code,{children:"3000ms"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"save-albums-for-current-user",children:(0,s.jsx)(n.a,{href:"https://developer.spotify.com/documentation/web-api/reference/save-albums-user",children:"Save albums for current user"})}),"\n",(0,s.jsxs)(n.p,{children:["This endpoint will demonstrate you how to use the ",(0,s.jsx)(n.code,{children:"@http"})," operator to make a ",(0,s.jsx)(n.code,{children:"PUT"})," request. Note that this block will go inside ",(0,s.jsx)(n.code,{children:"type Mutation"}),", so do make sure that you have added ",(0,s.jsx)(n.code,{children:"mutation: Mutation"})," in the schema block at the very beginning. This is how the mutation schema looks like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'saveAlbum(input: AlbumInput, accessToken: String): String\n  @http(\n    method: "PUT"\n    path: "/me/albums"\n    encoding: ApplicationJson\n    headers: [{ key: "Authorization", value: "Bearer {{args.accessToken}}" }]\n    body: "{{args.input}}"\n  )\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This mutation doesn't return anything, so we have set the return type to ",(0,s.jsx)(n.code,{children:"String"}),". Notice that there are two new fields in the ",(0,s.jsx)(n.code,{children:"@http"})," operator:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"encoding"}),": The encoding of the request body. This can be either ",(0,s.jsx)(n.code,{children:"ApplicationJson"})," or ",(0,s.jsx)(n.code,{children:"ApplicationFormUrlEncoded"}),". The default is ",(0,s.jsx)(n.code,{children:"ApplicationJson"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"body"}),": The body of the request. This is a Mustache template, and hence, we can pass in the ",(0,s.jsx)(n.code,{children:"input"})," argument directly."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Once done, we can go to the playground and issue the mutation like so:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'mutation {\n  saveAlbum(input: {ids: ["1OSzM1OWqtTnmIJJQpn62Q"]}, accessToken: "<your token here>")\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Doing this will add the album to your saved albums."}),"\n",(0,s.jsx)(n.h3,{id:"get-a-users-saved-albums",children:(0,s.jsx)(n.a,{href:"https://developer.spotify.com/documentation/web-api/reference/get-users-saved-albums",children:"Get a user's saved albums"})}),"\n",(0,s.jsx)(n.p,{children:"Using this, we can get a list of all the albums that a user has saved. This is how the query schema looks like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'getSavedAlbums(limit: Int!, offset: Int!, accessToken: String!): AlbumPage\n  @http(\n    method: "GET"\n    path: "/me/albums?limit={{args.limit}}&offset={{args.offset}}"\n    headers: [{ key: "Authorization", value: "Bearer {{args.accessToken}}" }]\n  )\n'})}),"\n",(0,s.jsx)(n.p,{children:"And then, we can issue the query like so:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'getSavedAlbums(\n  limit: 10\n  offset: 0\n  accessToken: "<your token here>"\n) {\n  total,\n  items {\n    name,\n    artists {\n      name\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Note that, this response can have varying results depending on your saved albums."}),"\n",(0,s.jsx)(n.h3,{id:"remove-an-album-from-a-users-saved-albums",children:(0,s.jsx)(n.a,{href:"https://developer.spotify.com/documentation/web-api/reference/remove-albums-user",children:"Remove an album from a user's saved albums"})}),"\n",(0,s.jsx)(n.p,{children:"Let's remove the album that we added earlier. This is how the mutation schema looks like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'removeAlbum(input: AlbumInput, accessToken: String): String\n  @http(\n    method: "DELETE"\n    path: "/me/albums"\n    encoding: ApplicationJson\n    headers: [{ key: "Authorization", value: "Bearer {{args.accessToken}}" }]\n    body: "{{args.input}}"\n  )\n'})}),"\n",(0,s.jsx)(n.p,{children:"We call it using the following mutation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'mutation {\n  removeAlbum(input: {ids: ["1OSzM1OWqtTnmIJJQpn62Q"]}, accessToken: "<your token here>")\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"That will remove the album from your saved albums."}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(n.p,{children:["This guide demonstrated how you can use Tailcall's ",(0,s.jsx)(n.code,{children:"@http"})," operator to interact with the Spotify API. We also saw how we can use the ",(0,s.jsx)(n.code,{children:"@cache"})," operator to cache the response of a query. Along with that, we also used ",(0,s.jsx)(n.code,{children:"@upstream"})," and ",(0,s.jsx)(n.code,{children:"@server"})," operators to set up our server and configure our HTTP client."]})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>r});var s=t(7294);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);