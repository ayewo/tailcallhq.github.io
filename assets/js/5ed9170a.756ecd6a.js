"use strict";(self.webpackChunktailcall_run=self.webpackChunktailcall_run||[]).push([[1],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(a),d=l,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return a?n.createElement(h,i(i({ref:t},u),{},{components:a})):n.createElement(h,i({ref:t},u))}));function h(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5752:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(7462),l=(a(7294),a(3905));const r={title:"CLI",sidebar_position:4},i=void 0,o={unversionedId:"intro/cli",id:"intro/cli",title:"CLI",description:"The TailCall CLI (Command Line Interface) is an essential part of the TailCall toolkit. It allows developers to manage and optimize GraphQL configurations directly from the command line. Each command within the CLI is designed to handle a specific aspect of GraphQL composition. Below, you'll find a detailed overview of each command, along with its options and usage examples.",source:"@site/docs/intro/cli.md",sourceDirName:"intro",slug:"/intro/cli",permalink:"/docs/intro/cli",draft:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/intro/cli.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"CLI",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/docs/intro/architecture"},next:{title:"Operators",permalink:"/docs/intro/operators"}},s={},p=[{value:"check",id:"check",level:2},{value:"--n-plus-one-queries",id:"--n-plus-one-queries",level:3},{value:"--blueprint",id:"--blueprint",level:3},{value:"--endpoints",id:"--endpoints",level:3},{value:"--schema",id:"--schema",level:3},{value:"generate",id:"generate",level:2},{value:"--source",id:"--source",level:3},{value:"--target",id:"--target",level:3},{value:"--write",id:"--write",level:3},{value:"start",id:"start",level:2},{value:"--port",id:"--port",level:3},{value:"--timeout",id:"--timeout",level:3},{value:"--tracing",id:"--tracing",level:3},{value:"--slow-query",id:"--slow-query",level:3},{value:"--persisted-queries",id:"--persisted-queries",level:3}],u={toc:p},c="wrapper";function m(e){let{components:t,...a}=e;return(0,l.kt)(c,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The TailCall CLI (Command Line Interface) is an essential part of the TailCall toolkit. It allows developers to manage and optimize GraphQL configurations directly from the command line. Each command within the CLI is designed to handle a specific aspect of GraphQL composition. Below, you'll find a detailed overview of each command, along with its options and usage examples."),(0,l.kt)("h2",{id:"check"},"check"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"check")," command validates a composition spec. Notably, this command can detect potential N+1 issues. To use the ",(0,l.kt)("inlineCode",{parentName:"p"},"check")," command, follow this format:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tc check [options] <file>...\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"check")," command offers various options that control different settings, such as the display of the blueprint, endpoints, and schema of the composition spec."),(0,l.kt)("h3",{id:"--n-plus-one-queries"},"--n-plus-one-queries"),(0,l.kt)("p",null,"This flag triggers the detection of N+1 issues."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Type: Boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: false")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tc check --n-plus-one-queries <file>...\n")),(0,l.kt)("h3",{id:"--blueprint"},"--blueprint"),(0,l.kt)("p",null,"This option enables the display of the blueprint of the composition spec."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Type: Boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: false")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tc check --blueprint <file>...\n")),(0,l.kt)("h3",{id:"--endpoints"},"--endpoints"),(0,l.kt)("p",null,"This option enables the display of the endpoints of the composition spec."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Type: Boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: false")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tc check --endpoints <file>...\n")),(0,l.kt)("h3",{id:"--schema"},"--schema"),(0,l.kt)("p",null,"This option enables the display of the schema of the composition spec."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Type: Boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: false")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tc check --schema <file>...\n")),(0,l.kt)("h2",{id:"generate"},"generate"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"generate")," command creates a composition spec from a source file. You can specify the format of the generated spec."),(0,l.kt)("p",null,"To use the ",(0,l.kt)("inlineCode",{parentName:"p"},"generate")," command, follow this format:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tc generate [options] <file>...\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"generate")," command provides various options that control the source file format, the output format, and the output file."),(0,l.kt)("h3",{id:"--source"},"--source"),(0,l.kt)("p",null,"Specifies the format of the source file."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"postman"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"sdl")),(0,l.kt)("li",{parentName:"ul"},"Default: None")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tc generate --source postman <file>...\n")),(0,l.kt)("h3",{id:"--target"},"--target"),(0,l.kt)("p",null,"Specifies the output format."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"config-json"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"config-yaml"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"config-graphql"),",",(0,l.kt)("inlineCode",{parentName:"li"},"json-lines")),(0,l.kt)("li",{parentName:"ul"},"Default: None")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tc generate --target config-json <file>...\n")),(0,l.kt)("h3",{id:"--write"},"--write"),(0,l.kt)("p",null,"Specifies the output file."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Type: String"),(0,l.kt)("li",{parentName:"ul"},"Default: None")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tc generate --write output.graphql <file>...\n")),(0,l.kt)("h2",{id:"start"},"start"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"start")," command launches the TailCall Server, acting as an API Gateway for GraphQL with specific configurations. The server can publish various GraphQL configurations, also known as ",(0,l.kt)("a",{parentName:"p",href:"/docs/intro/architecture#composition-specification-blueprint"},"composition specs"),"."),(0,l.kt)("p",null,"To start the server, use the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tc start [options]\n")),(0,l.kt)("p",null,"By default, the server starts on port 8080. The ",(0,l.kt)("inlineCode",{parentName:"p"},"start")," command offers options that allow you to control various settings, including the server port, response timeout, tracing, slow query duration limit, and more."),(0,l.kt)("h3",{id:"--port"},"--port"),(0,l.kt)("p",null,"Sets the port number for the server."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Type: Integer"),(0,l.kt)("li",{parentName:"ul"},"Default: 8080")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tc start --port 8081\n")),(0,l.kt)("h3",{id:"--timeout"},"--timeout"),(0,l.kt)("p",null,"Sets the global response timeout for the server."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Type: Integer (representing milliseconds)"),(0,l.kt)("li",{parentName:"ul"},"Default: 10000 (10 seconds)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tc start --timeout 5000\n")),(0,l.kt)("h3",{id:"--tracing"},"--tracing"),(0,l.kt)("p",null,"Enables or disables tracing."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Type: Boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: false")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tc start --tracing\n")),(0,l.kt)("h3",{id:"--slow-query"},"--slow-query"),(0,l.kt)("p",null,"Sets the slow query duration limit."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Type: Integer (representing milliseconds)"),(0,l.kt)("li",{parentName:"ul"},"Optional"),(0,l.kt)("li",{parentName:"ul"},"Default: None")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tc start --slow-query 2000\n")),(0,l.kt)("h3",{id:"--persisted-queries"},"--persisted-queries"),(0,l.kt)("p",null,"Enables or disables persisted queries."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Type: Boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: false")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tc start --persisted-queries\n")))}m.isMDXComponent=!0}}]);