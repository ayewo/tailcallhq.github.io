"use strict";(self.webpackChunktailcall_run=self.webpackChunktailcall_run||[]).push([[1],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,h=m["".concat(p,".").concat(d)]||m[d]||u[d]||l;return n?i.createElement(h,o(o({ref:t},c),{},{components:n})):i.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[m]="string"==typeof e?e:a,o[1]=r;for(var s=2;s<l;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1513:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var i=n(7462),a=(n(7294),n(3905));const l={title:"CLI",sidebar_position:6},o=void 0,r={unversionedId:"intro/cli",id:"intro/cli",title:"CLI",description:"TailCall CLI (Command Line Interface) is a powerful part of the TailCall toolkit, enabling developers to manage and optimize GraphQL configurations directly from the command line. Each command is purposefully designed to handle a particular aspect of GraphQL composition.",source:"@site/docs/intro/cli.md",sourceDirName:"intro",slug:"/intro/cli",permalink:"/docs/intro/cli",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro/cli.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"CLI",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Context",permalink:"/docs/intro/context"},next:{title:"Server",permalink:"/docs/intro/server"}},p={},s=[{value:"Commands",id:"commands",level:2},{value:"check",id:"check",level:3},{value:"publish",id:"publish",level:3},{value:"drop",id:"drop",level:3},{value:"list",id:"list",level:3},{value:"show",id:"show",level:3},{value:"generate",id:"generate",level:3}],c={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"TailCall CLI (Command Line Interface) is a powerful part of the TailCall toolkit, enabling developers to manage and optimize GraphQL configurations directly from the command line. Each command is purposefully designed to handle a particular aspect of GraphQL composition."),(0,a.kt)("p",null,"The general syntax for running TailCall CLI commands is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tc <command>\n")),(0,a.kt)("h2",{id:"commands"},"Commands"),(0,a.kt)("h3",{id:"check"},"check"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"check")," command validates a composition spec. If a remote environment is specified, it also displays the status of the spec in that environment. It has the capacity to detect potential N+1 issues as well."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tc check [options] <file>...\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-r, --remote <URL>"),": Specifies the remote environment URL. The default is ",(0,a.kt)("inlineCode",{parentName:"li"},"https://cloud.tailcall.run"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--n-plus-one-queries, --npo"),": Flag to detect N+1 issues."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--blueprint"),": Displays blueprint of the composition spec."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--endpoints"),": Displays endpoints of the composition spec."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-s, --schema"),": Displays the schema of the composition spec.")),(0,a.kt)("h3",{id:"publish"},"publish"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"publish")," command publishes the configuration file to the specified remote environment."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tc publish [options] <file>...\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-r, --remote <URL>"),": Specifies the remote environment URL. The default is ",(0,a.kt)("inlineCode",{parentName:"li"},"https://cloud.tailcall.run"),".")),(0,a.kt)("h3",{id:"drop"},"drop"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"drop")," command removes a composition spec from the remote environments using its SHA-256 hash."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tc drop [options] <digest>\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-r, --remote <URL>"),": Specifies the remote environment URL. The default is ",(0,a.kt)("inlineCode",{parentName:"li"},"https://cloud.tailcall.run"),".")),(0,a.kt)("h3",{id:"list"},"list"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"list")," command displays all published composition specs on the remote address."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tc list [options]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-r, --remote <URL>"),": Specifies the remote environment URL. The default is ",(0,a.kt)("inlineCode",{parentName:"li"},"https://cloud.tailcall.run"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--offset <integer>"),": Specifies the number of entries to skip for paginating output."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--limit <integer>"),": Specifies the limit to the number of entries in the output.")),(0,a.kt)("h3",{id:"show"},"show"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," command displays information for a composition spec using its SHA-256 hash on the remote server."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tc show [options] <digest>\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-r, --remote <URL>"),": Specifies the remote environment URL. The default is ",(0,a.kt)("inlineCode",{parentName:"li"},"https://cloud.tailcall.run"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--blueprint"),": Displays blueprint of the composition spec."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--endpoints"),": Displays endpoints of the composition spec."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-s, --schema"),": Displays the schema of the composition spec.")),(0,a.kt)("h3",{id:"generate"},"generate"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"generate")," command generates a composition spec from a source file. The generated format can be specified."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tc generate [options] <file>...\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--source postman | sdl"),": Specifies the format of the source file."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--target config-json | config-yaml | config-graphql | json-lines"),": Specifies the output format."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--write <file>"),": Writes the output to the specified file.")),(0,a.kt)("p",null,"All these commands are designed to handle specific tasks, providing a powerful toolkit for managing GraphQL configurations."))}u.isMDXComponent=!0}}]);